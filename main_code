# -*- coding: utf-8 -*-
"""
Created on Wed Oct 10 17:56:42 2018

@author: hany
"""

from sklearn.base import BaseEstimator,TransformerMixin
import pandas as pd
import numpy as np
from functools import partial
import logging
import re


class EnumString(BaseEstimator, TransformerMixin):
    '''
    select effective columns and transform enum column
    '''

    def __init__(self, max_num_ratio):
        '''
        max_num_ratio: 
        '''
        self.max_num_ratio = max_num_ratio
        
        self.enum_columns = []  # mapping column dict

    def fit(self, df,y=None):
        
        '''Shape like numerical features which is not numerical transforme into numerical;
           Features' name like channel ,code do not transforme into numerical
        '''
        
        regex1=re.compile(r"^\d*\.?\d+$")
        
        not_number_cols = df.select_dtypes(exclude=['int', 'float','int64', 'float64']).columns.tolist()
        number_cols = df.select_dtypes(include=['int', 'float','int64', 'float64']).columns.tolist()

        for col in not_number_cols:
            try:
                uniq_val_arr = pd.unique(df[col])
            except TypeError as e:
                continue
            uniq_length = df[col].unique().shape[0]
            
            # find num in str
            lst_num = []
            for string in uniq_val_arr:
                string = str(string)
                try:
                    if regex1.findall(string):
                        lst_num.append(regex1.findall(string)[0])
                except:
                    print(string)
            if len(lst_num) / uniq_length > self.max_num_ratio:
                self.enum_columns.append(col)
                
        return self

    def transform(self, df):
        
        if self.enum_columns is None :
            raise Exception('please fit first!!')

        # create a empty to store df value
        out_df = df.copy()
        regex2=re.compile(r"(channel)|(code$)")
        for col in self.enum_columns:
            # check whether col in df.columns
            if col not in out_df.columns:
                out_df[col + '_enumstring'] = np.full((out_df.shape[0]), np.nan)
            elif re.findall(regex2,str(col).lower()):
                pass
            else:
                out_df[col + '_enumstring'] = out_df[col].apply(lambda x : self.floatt(x))
        return out_df

    def floatt(self,x):
        try:
            floatx = float(x)
        except Exception as e:
#            logging.warning('funtion floatt wrong content : {}'.format(e))
            floatx = -9999
        return floatx 


if __name__ == '__main__':
    df_test = pd.DataFrame({'col1':['1','2','3','4','5','o','0'],
                            'col2':[0,1,2,3,4,5,6],
                            'col3':['a','b','c','c','6','8','8']
        })
    
    Enum = EnumString(max_num_ratio = 0.6)
    Enum.fit(df_test)
    df_test_result = Enum.transform(df_test)
    df_test_result
    
    df_test_result2 = df_test.apply(pd.to_numeric, errors='ignore')
    df_test_result2
